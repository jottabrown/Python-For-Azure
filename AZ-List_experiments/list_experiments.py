#---------------------------------------------------------------------------------------
# Author: Jean Alves
# Position: Systems Analyst | Software Engineer | Machine Learning Engineer
# Email: jeancleber.alves@hotmail.com
# LinkedIn: https://www.linkedin.com/in/jean-alves-6671a7105/
#---------------------------------------------------------------------------------------

import json
import os
import time
from datetime import datetime
from azureml.core import Workspace
from azureml.core.authentication import AzureCliAuthentication

# In√≠cio da contagem do tempo
start_time = time.time()

# Caminho para o arquivo de configura√ß√£o (config.json)
config_file_path = './config.json'

# Verificando se o arquivo de configura√ß√£o existe
if not os.path.exists(config_file_path):
    raise FileNotFoundError(f"Arquivo de configura√ß√£o n√£o encontrado: {config_file_path}")

# Carregar o arquivo JSON
with open(config_file_path) as f:
    config = json.load(f)
    experimentos_desejados = set(config["experimentos"])  # Usando set para otimizar buscas

# Autentica√ß√£o e obten√ß√£o do workspace
ws = Workspace.get(
    name=config['workspace_name'],
    subscription_id=config['subscription_id'],
    resource_group=config['resource_group'],
    auth=AzureCliAuthentication()
)

# Listar experimentos e exibir detalhes
print("\nüìå Experimentos encontrados:")
print("-" * 80)

for name, experiment in ws.experiments.items():
    if name in experimentos_desejados:
        last_run = next(experiment.get_runs(), None)  # Obt√©m o primeiro run (√∫ltima execu√ß√£o)
        
        last_run_time = "Nenhuma execu√ß√£o encontrada"
        run_id = "N/A"
        status = "Desconhecido"
        created_by = "Desconhecido"

        if last_run:
            run_details = last_run.get_details()
            run_id = last_run.id
            status = run_details.get("status", "Desconhecido")
            created_by = run_details.get("createdBy", {}).get("userName", "Desconhecido")

            if "startTimeUtc" in run_details:
                last_run_time = datetime.strptime(run_details["startTimeUtc"], "%Y-%m-%dT%H:%M:%S.%fZ")

        # Exibir detalhes formatados
        print(f"üîπ Nome: {name}")
        print(f"   üìÖ √öltima execu√ß√£o: {last_run_time}")
        print(f"   üîÑ Status: {status}")
        print(f"   üÜî Run ID: {run_id}")
        print(f"   üë§ Criado por: {created_by}")
        print("-" * 80)

# Tempo total de execu√ß√£o
end_time = time.time()
print(f"\n‚è≥ Tempo total de execu√ß√£o: {round(end_time - start_time, 2)} segundos")
